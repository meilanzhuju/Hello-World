print(bin(10))  # ob reperesents binary 'ob1110'
bin((4))
0b1010
Out[19]:
'0b100'
In [20]:

4 | 10
4 | 10
Out[20]:
14
In [21]:

-1 == ~0 # ~ bit-flip 位翻转 
Out[21]:
True
In [ ]:

​
In [25]:

a = [1, 2, 3]
b = [1, 2, 3]
print(a == b)
print(a is b)
print(a is not b)
​
a = [1, 2, 3]
b = a
a is b
#第一种a和b 是不同额对象  
#第二种a和b，是相同的对象 is判断是不是相同的对象
# Python 的变量是指针，is 判断是不是指针指向同一个对象（容器），而不是容器包含的内容
​
True
False
True
Out[25]:
True
In [28]:

)
# 成员操作符 membership operators
print(1 in [1, 2, 3])
2 not in [1, 2, 3]
True
Out[28]:
False
In [30]:

0.1 + 0.2 == 0.3
​
print("0.1 = {0:.17f}".format(0.1))
print("0.2 = {0:.17f}".format(0.2))
print("0.3 = {0:.17f}".format(0.3))
0.1 = 0.10000000000000001
0.2 = 0.20000000000000001
0.3 = 0.29999999999999999
In [31]:

# 复数 
complex(1, 2)
Out[31]:
(1+2j)
In [32]:

2j
1 + 2j
Out[32]:
(1+2j)
In [39]:

c = 3 + 4j
print(c.real) # real part
print(c.imag) # imaginary part
print(c.conjugate()) #complex conjugate
print(abs(c)) # magnitude --that is, sqrt(c.real** 2 +c.imag ** 2)
​
3.0
4.0
(3-4j)
5.0
In [48]:

message = "what do you like？"
response = 'spam'
print(len(response))
# Make uppercase. See also str.lower()
print(response.upper())
# Capitalize. See also str.title()
print(message + response)
# multiplication is multiple concatenation
5 * response
# Access individual characters message
message[0]
​
4
SPAM
what do you like？spam
Out[48]:
'w'
In [53]:

# None Type
print(type(None))
return_value = print('abc')
print(return_value)
​
<class 'NoneType'>
abc
None
In [58]:

大小写敏感
result = (4 < 5)
print(result)
print(type(result)) #大小写敏感
print(True, False)
True
<class 'bool'>
True False
In [66]:

print(bool(2014))
print(bool(0))
print(3.1415)
print(bool(None))
print(bool('abc'))
print(bool([1, 2, 3]))
print(bool([])) #False
​
True
False
3.1415
False
True
True
False
In [73]:

# list ordered collection
# tuple immuatable ordered collection   round 
# dict unordered (key, value ) mapping  square
# set unordered collection of unique values  curly brackets
# lists 
L = [2, 3, 5, 7]
print(len(L))
L.append(11)
print(L)
L + [13, 17, 19]
# sort() method sorts in-place
L = [2, 5, 1, 6, 3, 4]
L.sort()
L = [1, 'two', 3.14, [0, 3, 5]]
​
4
[2, 3, 5, 7, 11]
In [88]:

# list indexing and slicing
L = [2, 3, 5, 7, 11]
print(L[0])
print(L[1])
print(L[-1])
​
print(L[0:3])
print(L[-3:])
print(L[::2])
print(L[::-1])
L[0] = 100
print(L[0])
​
L[1:3] = [55, 56]
​
​
​
#tuple 不可以给元素赋值，也不可以添加元素没有append方法
x = 0.125
x.as_integer_ratio() # 
numerator, denominator = x.as_integer_ratio()
print(numerator / denominator)
2
3
11
[2, 3, 5]
[5, 7, 11]
[2, 5, 11]
[11, 7, 5, 3, 2]
100
0.125
In [96]:

#
numbers = {'one':1, 'two':2, 'three':3}
# Access a value via the key
numbers['two']
numbers['ninety'] = 90
print(numbers) # 字典是没有顺序的
​
# primes 
primes = {2, 3, 5, 7}
odds = {1, 3, 5, 7, 9}
# union:items appearing in either
print(primes | odds) # with an operator
print(primes.union(odds)) # equivalently with a method
# intersection : items appearing in both
primes & odds  # with an operator
print(primes.intersection(odds)) # equivalently with a method
​
# difference :item in primes but not in odds
primes - odds # with an operator
print(primes.difference(odds)) # equivalent with a method
​
# symmetric difference: items appearing in only one set
primes ^ odds # with an operator
print(primes.symmetric_difference(odds)) # equivalently with a method 
​
​
# More Specialized data structure
# collections.namedtuple
# collections.defaultdict
# collections.OrderedDict
​
​
#
​
​
​
​
{'three': 3, 'one': 1, 'ninety': 90, 'two': 2}
{1, 2, 3, 5, 7, 9}
{1, 2, 3, 5, 7, 9}
{3, 5, 7}
{2}
{1, 2, 9}
In [101]:

# Control Flow
# conditional statements including if, elif, and else 
# loop statements including for and while and the accompanying break, continue, and pass
​
# range() 
# Python2 range() produces a list
# Python range() produces an iterable object
​
# Control Flow
# break statement breaks out of the loop entirely
# continue statement skips the remainder of the current loop and goes to the next itration
for n in range(20):
    print(n)
    
for n in range(0, 20):
    print(n)
    
# check if n is even
if n % 2 == 0:
    #continue
    print(n, end='')
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
In [104]:

# def function
# lambda statement
​
print('abc')
print(1, 2, 3)
print(1, 2, 3, sep = '--')
​
abc
1 2 3
1--2--3
In [108]:

# Defining Functions
def Fibonacci(N):
    L = []
    a, b = 0, 1
    while len(L) < N:
        a, b = b, a + b
        L.append(a)
    return L
Fibonacci(10)
Out[108]:
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
In [110]:

def real_imag_conj(val):
    return val.real, val.imag, val.conjugate()
r, i, c = real_imag_conj(3 + 4j)
print(r, i, c)
3.0 4.0 (3-4j)
In [111]:

def Fibonacci(N, a = 0, b = 1):
    L = []
    while len(L) < N:
        a, b = b, a+b
        L.append(a)
    return L
Fibonacci(10)
Out[111]:
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
In [112]:

0,2
Fibonacci(10,0,2)
Out[112]:
[2, 2, 4, 6, 10, 16, 26, 42, 68, 110]
In [113]:

Fibonacci(10, b = 3, a = 1)
Out[113]:
[3, 4, 7, 11, 18, 29, 47, 76, 123, 199]
In [120]:

# *args and **kwargs : Flexible Arguments
def catch_all(*args, **kwargs):
    print('*args = ', args)
    print('**kwargs = ', kwargs)
​
catch_all(1,2,3, a = 4, b = 5)
​
catch_all('a', keyword = 2)
​
# * expand this as a sequence   
# ** expand this as a dictionary  
input = (1, 2, 3)
keywords = {'pi':3.14}
catch_all(*input, **keywords)
​
​
​
# *args 表示任何多个无名参数，他是一个tuple
# ** kwargs 表示关键字参数他是一个dict
​
def foo(*args, **kwargs):
    print('args = ', args, type(args))
    print('kwargs = ', kwargs, type(kwargs))
    print('*******************')
​
if __name__ == '__main__':
    foo(1,2,3)
    foo(a = 1, b = 2, c = 3)
    foo(1, 2, a = 1, b= 2, c = 3)
    foo(1, 'b', 'c', a =1, b = 'b', c = 'c')
*args =  (1, 2, 3)
**kwargs =  {'b': 5, 'a': 4}
*args =  ('a',)
**kwargs =  {'keyword': 2}
*args =  (1, 2, 3)
**kwargs =  {'pi': 3.14}
args =  (1, 2, 3) <class 'tuple'>
kwargs =  {} <class 'dict'>
*******************
args =  () <class 'tuple'>
kwargs =  {'b': 2, 'c': 3, 'a': 1} <class 'dict'>
*******************
args =  (1, 2) <class 'tuple'>
kwargs =  {'b': 2, 'c': 3, 'a': 1} <class 'dict'>
*******************
args =  (1, 'b', 'c') <class 'tuple'>
kwargs =  {'b': 'b', 'c': 'c', 'a': 1} <class 'dict'>
*******************
